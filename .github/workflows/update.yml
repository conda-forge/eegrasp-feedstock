name: Update Conda-Forge Recipe with Grayskull

on:
  schedule:
    - cron: '0 0 * * *'  # Runs at midnight UTC
  workflow_dispatch:

jobs:
  update-recipe:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout feedstock repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install Grayskull
      run: |
        pip install grayskull

    - name: Check for New Version on PyPI
      id: check_version
      run: |
        PACKAGE_NAME="eegrasp"
        PYPI_URL="https://pypi.org/pypi/$PACKAGE_NAME/json"
        CURRENT_VERSION=$(grep -oP '(?<={% set version = ").*(?=" %})' recipe/meta.yaml || echo '')
        LATEST_VERSION=$(curl -s $PYPI_URL | jq -r .info.version)
        
        if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ]; then
          echo "New version available: $LATEST_VERSION"
          echo "::set-output name=new_version::$LATEST_VERSION"
          echo "::set-output name=package_name::$PACKAGE_NAME"
        else
          echo "No new version found"
          echo "::set-output name=new_version::"
          echo "::set-output name=package_name::"
        fi

    - name: Update Recipe Using Grayskull
      if: steps.check_version.outputs.new_version != ''
      run: |
        NEW_VERSION=${{ steps.check_version.outputs.new_version }}
        PACKAGE_NAME=${{ steps.check_version.outputs.package_name }}

        # Regenerate the entire recipe using Grayskull
        grayskull pypi $PACKAGE_NAME --output recipe --maintainers lcortesg

        # Commit changes
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        mv recipe/$PACKAGE_NAME/meta.yaml recipe/meta.yaml
        rm -rf recipe/$PACKAGE_NAME
        git add recipe/*
        git status  # Check status
        git commit -m "Update $PACKAGE_NAME to version $NEW_VERSION" || echo "No changes to commit"

    - name: Create Pull Request
      if: steps.check_version.outputs.new_version != ''
      uses: peter-evans/create-pull-request@v3
      with:
        branch: update-to-${{ steps.check_version.outputs.new_version }}
        title: Update ${{ steps.check_version.outputs.package_name }} to ${{ steps.check_version.outputs.new_version }}
        body: |
          This PR updates the ${{ steps.check_version.outputs.package_name }} package to version ${{ steps.check_version.outputs.new_version }} using Grayskull.
        labels: |
          automerge
        
    - name: Auto Merge Pull Request
      if: steps.check_version.outputs.new_version != ''
      uses: pascalgn/automerge-action@v0.15.0
      with:
        merge_method: squash  # or 'merge', 'rebase' based on your preference
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
